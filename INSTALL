To install, run "./configure", then "make".  If you're checking this
directly out of CVS, you'll need to run "sh ./SMakefile" to build the
configure script first.

Note that the library looks for plugins in /usr/lib/sasl, but installs
them into ${prefix}/lib/sasl, where ${prefix} is usually something
like /usr/local.  This is intentional - we want the plugins installed
with the rest of the package (wherever things get installed at your
site), but we want the library to *always* be able to find its plugins
under /usr/lib/sasl, no matter where you install things, so that the
SASL plugin ABI on all platforms is roughly the same.

If you don't want to do this for some reason, you can set the location
where the library will look for plugins by setting the environment
variable SASL_PATH to the path the library should use.

You'll probably need the GNU make program, available as of this
writing at <url:ftp://ftp.gnu.org/pub/gnu/make-3.77.tar.gz>.

libsasl can use gdbm or ndbm to implement its user/password lookup.
Most systems come with ndbm these days; as of this writing, gdbm's
available as <url:ftp://ftp.gnu.org/pub/gnu/gdbm-1.7.3.tar.gz>.  This
isn't necessary, but it's useful if you want to use it with a server
which doesn't supply its own authentication database (i.e. most
servers).

For Kerberos support, you'll need the kerberos libraries.  At CMU, the
version we use comes from <url:http://www.pdc.kth.se/kth-krb/>.

For GSSAPI support you will need either MIT Kerberos 5 or the Heimdal
implementation <url:http://www.pdc.kth.se/heimdal>.

This has been tested under Linux 2.0, and Solaris 2.6.  It should work
under any platform where dynamic objects can be linked against other
dynamic objects, and where the dynamic library file extension is
".so".

You may want to play with your CPPFLAGS and LDFLAGS a little if you're
using vendor compilers (which we recommend).  We use the following
settings to configure the system on various platforms:

	Solaris: env CC=cc CPPFLAGS=-I/usr/local/include LDFLAGS=-L/usr/local/lib ./configure

	IRIX: env CC=cc CPPFLAGS=-I/usr/local/include LDFLAGS=-L/usr/local/lib ./configure

	Linux: ./configure

----------------------------------------------------------------------

Installation under Win32:

* From within Visual C++, open workspace "sasl\win32\libsasl\libsasl.dsw"
* Select "Batch Build" under the Build menu to build all versions.

At this time, there are no installers available.  To install by hand:

* Decide on an installation directory for your plugins (IE: c:\windows\sasl)
* Copy all generated plugins into this directory:
  cd sasl\win32
  copy libsasl\Release\*.dll c:\sasl-plugins
  copy saslANONYMOUS\Release\*.dll c:\sasl-plugins
  copy saslCRAM\Release\*.dll c:\sasl-plugins
  copy saslKERBEROSV4\Release\*.dll c:\sasl-plugins
  copy saslPLAIN\Release\*.dll c:\sasl-plugins
  copy saslSCRAM\Release\*.dll c:\sasl-plugins
* Update the registry with these locations.  Example registry settings are in the file:
  sasl\win32\cmu-sasl.reg
* Add this directory to your path, so that apps will be able to find the library
  PATH=c:\sasl-plugins;%PATH%

This has been tested under Windows 2000, using Visual Studio 6 SP1.

WIN32 NOTES
###########

* ANONYMOUS and KERBEROS_V4 have been tested.
* Kerberos mechanism has been compiled using MIT's kclient package
* PLAIN is currently crippled, and does not support server use.
* CRAM-MD5 and SCRAM-MD5 should work, but have not been tested.
* DIGEST-MD5 and GSSAPI have been totally untested.
